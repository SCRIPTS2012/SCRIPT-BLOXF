-- SDowHub - Fixes + safer version (Melee auto farm + PvP aim)
-- Key = "sdowhub"

-- safe Rayfield load
local ok, Rayfield = pcall(function()
    return loadstring(game:HttpGet('https://sirius.menu/rayfield'))()
end)
if not ok or not Rayfield then
    warn("Rayfield load failed, aborting script.")
    return
end

local TweenService = game:GetService("TweenService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local RunService = game:GetService("RunService")
local VirtualUser = game:GetService("VirtualUser")

local LocalPlayer = Players.LocalPlayer
if not LocalPlayer then
    warn("LocalPlayer not available.")
    return
end

-- safe access to CommF_ remote
local CommF = (ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_")) or ReplicatedStorage:FindFirstChild("CommF_")
local function safeInvokeRemote(name, ...)
    if not CommF or type(CommF.InvokeServer) ~= "function" then
        -- try refresh path
        CommF = (ReplicatedStorage:FindFirstChild("Remotes") and ReplicatedStorage.Remotes:FindFirstChild("CommF_")) or ReplicatedStorage:FindFirstChild("CommF_")
        if not CommF then
            -- silently return
            return nil
        end
    end
    local suc, res = pcall(function()
        return CommF:InvokeServer(name, ...)
    end)
    if not suc then
        warn("Remote invoke failed:", name, res)
        return nil
    end
    return res
end

-- GUI window
local Window = Rayfield:CreateWindow({
    Name = "‚öîÔ∏è SDowHub Fixed | Blox Fruits",
    LoadingTitle = "SDowHub Loading...",
    LoadingSubtitle = "Fixed by assistant",
    ConfigurationSaving = { Enabled = true, FolderName = "SDowHub", FileName = "BloxFruits" },
    KeySystem = true,
    KeySettings = { Title = "SDowHub Key", Subtitle = "Nh·∫≠p key", Note = "Key = sdowhub", FileName = "SDowHubKey", SaveKey = true, GrabKeyFromSite = false, Key = {"sdowhub"} }
})

-- tabs
local Main = Window:CreateTab("‚öîÔ∏è Auto Farm", 4483362458)
local Teleport = Window:CreateTab("üåç Teleport", 4483362458)
local Misc = Window:CreateTab("‚öôÔ∏è Misc", 4483362458)

-- state
local AutoFarmEnabled, AutoQuestEnabled, AutoBossEnabled, AutoDFEnabled, AutoLevelEnabled = false,false,false,false,false
local AimEnabled, AimRadius = false, 50
local farmRunning = false

-- Sea & islands (you can adjust coords)
local QuestData = {
    ["Sea1"] = { NPC=Vector3.new(1100,15,1100), Mobs={"Bandit","Monkey"}, Boss={"Bandit Leader"} },
    ["Sea2"] = { NPC=Vector3.new(-2500,20,2200), Mobs={"Pirate","Brute"}, Boss={"Pirate Captain"} },
    ["Sea3"] = { NPC=Vector3.new(-1500,20,1000), Mobs={"Marine Captain","Fishman Warrior"}, Boss={"Marine Admiral"} }
}

local Islands = {
    ["Starter Island"] = Vector3.new(1100,15,1100),
    ["Marine"] = Vector3.new(-2500,20,2200),
    ["Jungle"] = Vector3.new(-1500,20,1000),
    ["Sky Island"] = Vector3.new(-5000,500,-1000),
    ["Desert"] = Vector3.new(5000,20,-3000),
    ["Snow Island"] = Vector3.new(-6000,20,-2000),
    ["Prison"] = Vector3.new(2000,20,-4000),
    ["Revolutionary"] = Vector3.new(-3500,50,3500),
    ["Colosseum"] = Vector3.new(0,20,0),
    ["Underwater City"] = Vector3.new(4500,-50,1000),
    ["Pirate Island"] = Vector3.new(3200,20,-1500)
}

-- helpers
local function safeGetLevel()
    local success, level = pcall(function()
        if LocalPlayer:FindFirstChild("Data") and LocalPlayer.Data:FindFirstChild("Level") then
            return LocalPlayer.Data.Level.Value
        end
        return 0
    end)
    if success then return level or 0 end
    return 0
end

local function getSea(level)
    if level < 50 then return "Sea1"
    elseif level < 150 then return "Sea2"
    else return "Sea3"
    end
end

local function findEnemiesList()
    -- return a list-like table of candidate enemy models
    if Workspace:FindFirstChild("Enemies") then
        return Workspace.Enemies:GetChildren()
    else
        -- fallback: any Model under workspace that has Humanoid and HumanoidRootPart
        local out = {}
        for _,v in pairs(Workspace:GetDescendants()) do
            if v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                table.insert(out, v)
            end
        end
        return out
    end
end

local function getNearestEnemyByNames(names)
    local hrp = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end
    local nearest, minDist = nil, math.huge
    for _,v in pairs(findEnemiesList()) do
        if v and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
            -- matching by partial name to be more robust (e.g. "Bandit [Lv. 5]" -> "Bandit")
            for _,n in ipairs(names) do
                if type(v.Name) == "string" and string.find(v.Name, n) then
                    local dist =
